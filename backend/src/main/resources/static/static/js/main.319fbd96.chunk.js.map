{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["dd","corpId","fetch","domain","then","res","json","result","data","permission","requestAuthCode","onSuccess","axios","get","code","response","sessionStorage","setItem","userid","unionid","deptIdList","qs","require","params","deptIds","paramsSerializer","stringify","arrayFormat","console","log","getItem","catch","error","alert","JSON","onFail","err","App","className","onClick","url","method","headers","mediaId","userId","userIdList","encodeURIComponent","messageId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAkHAA,SAAS,WAUL,IAAIC,EACJC,MAAMC,WACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAEHN,EAASM,EAAOC,KAAKP,OAErBD,UAAWS,WAAWC,gBAAgB,CAElCT,OAAQA,EACRU,UAAW,SAAUJ,GAEjBK,IAAMC,IAAIV,mBAA8BI,EAAOO,MAC1CV,MAAK,SAAAW,GAMFC,eAAeC,QAAQ,SAAUF,EAASP,KAAKA,KAAKU,QACpDF,eAAeC,QAAQ,UAAWF,EAASP,KAAKA,KAAKW,SACrDH,eAAeC,QAAQ,SAAUF,EAASP,KAAKA,KAAKY,WAAW,IAC/D,IAAMC,EAAKC,EAAQ,KACnBV,IAAMC,IAAIV,SAAmB,CACzBoB,OAAQ,CACJC,QAAST,EAASP,KAAKA,KAAKY,YAEhCK,iBAAkB,SAAUF,GACxB,OAAOF,EAAGK,UAAUH,EAAQ,CAACI,YAAa,cAE/CvB,MAAK,SAAAW,GACJa,QAAQC,IAAId,GAEZC,eAAeC,QAAQ,aAAcD,eAAec,QAAQ,cAC7DC,OAAM,SAAAC,GACLC,MAAMC,KAAKR,UAAUM,UAG5BD,OAAM,SAAAC,GACHC,MAAMC,KAAKR,UAAUM,QAKjCG,OAAQ,SAAUC,GACdH,MAAMC,KAAKR,UAAUU,aAM1BC,MAtKf,WAuFI,OACI,qBAAKC,UAAU,MAAf,SAII,yBAAQA,UAAU,aAAlB,UACI,wBAAQC,QA1FA,WAIhB3B,IAAM,CACF4B,IAAKrC,UACLsC,OAAQ,OACRjC,KALS,GAMTkC,QAAS,CACL,eAAgB,sBAGnBtC,MAAK,SAAUW,GAEZa,QAAQC,IAAId,GACZC,eAAeC,QAAQ,UAAWF,EAASP,KAAKA,KAAKmC,YAGxDZ,OAAM,SAAUC,GACbJ,QAAQC,IAAIG,OAuEZ,kDACA,wBAAQO,QApEK,WAErB,IAAMK,EAAS5B,eAAec,QAAQ,UAEhCe,GADU7B,eAAec,QAAQ,WACpBd,eAAec,QAAQ,eAKpCtB,GAJSQ,eAAec,QAAQ,UAIzB,CACT,MAASc,EACT,KAAS,qBACT,WAAe,CAACC,GAChB,gBAAoB,CAChB,IAAQ,OACR,KAAQ,CACJ,WAAe,2CAA6CC,mBAT9D,4BASwF,iBACtF,OAAW9B,eAAec,QAAQ,WAClC,MAAU,eACV,KAAS,mBAKrBlB,IAAM,CACF4B,IAAKrC,iBACLsC,OAAQ,OACRjC,KAAMA,EACNkC,QAAS,CACL,eAAgB,sBAGnBtC,MAAK,SAAUW,GAEZa,QAAQC,IAAId,GACZC,eAAeC,QAAQ,YAAaF,EAASP,KAAKA,KAAKuC,cAG1DhB,OAAM,SAAUC,GACbJ,QAAQC,IAAIG,OA6BZ,4CACA,wBAAQO,QA1BC,WAGjB3B,IAAM,CACF4B,IAAKrC,kBAA6Ba,eAAec,QAAQ,aACzDW,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBtC,MAAK,SAAUW,OAGfgB,OAAM,SAAUC,GACbJ,QAAQC,IAAIG,OAYZ,oEC5FDgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.319fbd96.chunk.js","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport * as dd from 'dingtalk-jsapi';\n\n//内网穿透工具介绍:\n// https://developers.dingtalk.com/document/resourcedownload/http-intranet-penetration?pnamespace=app\n// 替换成后端服务域名\nexport const domain = \"\";\n\nfunction App() {\n\n\n    const uploadMedia = () => {\n        // 获取存储的用户部门和ID\n        const data = {};\n        // 发起会议\n        axios({\n            url: domain + '/upload',\n            method: 'post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                // alert(JSON.stringify(response));\n                console.log(response);\n                sessionStorage.setItem(\"mediaId\", response.data.data.mediaId);\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    const sendGroupMessage = () => {\n        // 获取存储的用户部门和ID\n        const userId = sessionStorage.getItem('userId');\n        const unionId = sessionStorage.getItem('unionId');\n        const userIdList = sessionStorage.getItem('userIdList');\n        const deptId = sessionStorage.getItem('deptId');\n        // demo直接构建了要请求的数据，实际开发需要从页面获取\n        let url = 'https://www.dingtalk.com';\n\n        const data = {\n            \"owner\": userId,\n            \"name\" : \"群消息\",\n            \"userIdList\" : [userIdList],\n            \"dingTalkMessage\" : {\n                \"msg\" : \"link\",\n                \"link\" :{\n                    \"messageUrl\" : \"dingtalk://dingtalkclient/page/link?url=\" + encodeURIComponent(url) + \"&pc_slide=true\",\n                    \"picUrl\" : sessionStorage.getItem('mediaId'),\n                    \"title\" : \"测试\",\n                    \"text\" : \"测试\",\n                }\n            }\n        };\n        // 发起会议\n        axios({\n            url: domain + '/message/group',\n            method: 'post',\n            data: data,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n                // alert(JSON.stringify(response));\n                console.log(response);\n                sessionStorage.setItem(\"messageId\", response.data.data.messageId);\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    const readUserList = () => {\n\n        // 获取已读人员列表\n        axios({\n            url: domain + '/message/group/' + sessionStorage.getItem(\"messageId\"),\n            method: 'put',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(function (response) {\n\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    };\n\n    return (\n        <div className=\"App\">\n            {/*<header className=\"App-header\">*/}\n            {/*<button onClick={createMeeting}>领用并提交审批</button>*/}\n            {/*</header>*/}\n            <header className=\"App-header\">\n                <button onClick={uploadMedia}>上传媒体文件</button>\n                <button onClick={sendGroupMessage}>发送群消息</button>\n                <button onClick={readUserList}>查看已读人员列表</button>\n            </header>\n            {/*<div className=\"container\">*/}\n            {/*    <List/>*/}\n            {/*</div>*/}\n        </div>\n    );\n};\n\n\ndd.ready(function () {\n    // let corpId;\n    // axios.get(domain + \"/config\")\n    //     .then(response => {\n    //         corpId = response.data.corpId;\n    //     })\n    //     .catch(error => {\n    //         alert(JSON.stringify(error))\n    //         // console.log(error.message)\n    //     })\n    let corpId;\n    fetch(domain + '/config')\n        .then(res => res.json())\n        .then((result) => {\n            // alert(JSON.stringify(result));\n            corpId = result.data.corpId;\n            // dd.ready参数为回调函数，在环境准备就绪时触发，jsapi的调用需要保证在该回调函数触发后调用，否则无效。\n            dd.runtime.permission.requestAuthCode({\n\n                corpId: corpId, //三方企业ID\n                onSuccess: function (result) {\n                    // alert(JSON.stringify(result));\n                    axios.get(domain + \"/login?authCode=\" + result.code)\n                        .then(response => {\n                            // alert(JSON.stringify(response));\n                            // alert(JSON.stringify(response.data));\n                            // alert(JSON.stringify(response.data.data.userid));\n                            // alert(JSON.stringify(response.data.data.deptIdList[0]));\n                            // 登录成功后储存用户部门和ID\n                            sessionStorage.setItem(\"userId\", response.data.data.userid);\n                            sessionStorage.setItem(\"unionId\", response.data.data.unionid);\n                            sessionStorage.setItem(\"deptId\", response.data.data.deptIdList[0]);\n                            const qs = require('qs');\n                            axios.get(domain + \"/users\", {\n                                params: {\n                                    deptIds: response.data.data.deptIdList,\n                                },\n                                paramsSerializer: function (params) {\n                                    return qs.stringify(params, {arrayFormat: 'repeat'});\n                                }\n                            }).then(response => {\n                                console.log(response);\n                                // 此处为创建人的userId，可以使用response里面返回的数据\n                                sessionStorage.setItem(\"userIdList\", sessionStorage.getItem(\"userId\"));\n                            }).catch(error => {\n                                alert(JSON.stringify(error));\n                            })\n                        })\n                        .catch(error => {\n                            alert(JSON.stringify(error));\n                            // console.log(error.message)\n                        })\n\n                },\n                onFail: function (err) {\n                    alert(JSON.stringify(err))\n                }\n            });\n        });\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}